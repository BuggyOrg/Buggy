// Generated by LiveScript 1.2.0
(function(){
  var chai, Compose, Environment, Group, Generic, Ld;
  import$(global, require('prelude-ls'));
  chai = require('chai');
  chai.should();
  Compose = requirejs("ls!src/compose");
  Environment = requirejs('ls!src/environment');
  Group = requirejs('ls!src/group');
  Generic = requirejs('ls!src/generic');
  Ld = requirejs('ls!src/language-definition');
  describe("Compose", function(){
    var emptyLd, minLd;
    emptyLd = {
      query: function(q){
        return {};
      }
    };
    minLd = Ld.create(function(query){
      switch (query) {
      case "## LanguageName":
        return "TESTLANG";
      case "min-gen":
        return [{
          "atomic": true,
          "implementation": "min-impl"
        }];
      default:
        return {};
      }
    });
    describe("Composing a Scene", function(){
      it("should fail if the program contains no 'main' Method", function(){
        var env;
        env = Environment.create();
        (function(){
          return Compose.compose(env, emptyLd);
        }).should['throw'](Error);
      });
      it("should generate a source string for a valid scene", function(){
        var env, main, minGeneric;
        env = Environment.create();
        main = Group.create({
          name: "main"
        });
        minGeneric = Generic.create("min-gen");
        Group.addGeneric(main, minGeneric);
        Environment.addGroup(env, main);
        Compose.compose(env, minLd, function(source){
          return source.should.include("min-impl");
        });
      });
    });
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
